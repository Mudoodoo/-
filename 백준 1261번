import sys, heapq

input = sys.stdin.readline
m, n = map(int, input().split())

maze = []
for _ in range(n):
  maze.append(list(map(int, input().rstrip())))

dx = [1,0,-1,0]
dy = [0,1,0,-1]
INF = int(1e9)
distance = [[INF] * (m) for _ in range(n)]

def dijkstra():
  queue = []
  heapq.heappush(queue, (0, 0, 0))
  distance[0][0] = 0

  while queue:
    dist, x, y = heapq.heappop(queue)
    if dist > distance[x][y]:
      continue
    for i in range(4):
      nx = x + dx[i]
      ny = y + dy[i]
      if 0 <= nx < n and 0 <= ny < m:
        if maze[nx][ny] == 0 and distance[nx][ny] > distance[x][y]:
          distance[nx][ny] = distance[x][y]
          heapq.heappush(queue, (distance[nx][ny], nx, ny))
        if maze[nx][ny] == 1 and distance[nx][ny] > distance[x][y] + 1:
          distance[nx][ny] = distance[x][y] + 1
          heapq.heappush(queue, (distance[nx][ny], nx, ny))

dijkstra()
print(distance[n-1][m-1])
