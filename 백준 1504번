import sys, heapq
input = sys.stdin.readline
INF = int(1e9)

n, e = map(int, input().split())
graph = [[] for _ in range(n+1)]
distance = [INF] * (n+1)

for _ in range(e):
  a,b,c = map(int, input().split())
  graph[a].append((b,c))
  graph[b].append((a,c))

v1, v2 = map(int, input().split())

def dijkstra(start, end):
  distance = [INF] * (n+1)
  queue = []
  heapq.heappush(queue, (0, start))
  distance[start] = 0

  while queue:
    dist, now = heapq.heappop(queue)
    if dist > distance[now]:
      continue
    for i in graph[now]:
      cost = dist + i[1]
      if cost < distance[i[0]]:
        distance[i[0]] = cost
        heapq.heappush(queue, (cost, i[0]))

  return distance[end]

totalCost1 = 0
totalCost1 += dijkstra(1, v1)
totalCost1 += dijkstra(v1, v2)
totalCost1 += dijkstra(v2, n)

totalCost2 = 0
totalCost2 += dijkstra(1, v2)
totalCost2 += dijkstra(v2, v1)
totalCost2 += dijkstra(v1, n)
if totalCost1 >= INF and totalCost2 >= INF:
  print(-1)
else:
  print(min(totalCost1, totalCost2))
