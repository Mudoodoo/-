import sys, heapq

input = sys.stdin.readline
n, m = map(int, input().split())
graph = [[] for _ in range(n+1)]
for _ in range(m):
  a,b,c = map(int, input().split())
  graph[a].append((b,c))
  graph[b].append((a,c))
INF = int(1e9)
distance = [INF] * (n+1)
parent = [0] * (n+1)

def dijkstra():
  queue = []
  heapq.heappush(queue, (0, 1))
  distance[1] = 0

  while queue:
    dist, now = heapq.heappop(queue)
    if dist > distance[now]:
      continue
    for i in graph[now]:
      cost = dist + i[1]
      if cost < distance[i[0]]:
        parent[i[0]] = now
        distance[i[0]] = cost
        heapq.heappush(queue, (cost, i[0]))

dijkstra()
print(n-1)
for i in range(2, n+1):
  print(i, parent[i])
