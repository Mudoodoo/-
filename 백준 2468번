from collections import deque

n = int(input())
heights = []
rainHeights = set([0])
for _ in range(n):
  data = list(map(int, input().split()))
  heights.append(data)
  rainHeights = rainHeights.union(set(data))

resultList = []

def bfs(startX, startY, rainHeight):
  global result
  
  visited[startX][startY] = 1
  queue = deque([[startX, startY]])
  dx = [1,0,-1,0]
  dy = [0,1,0,-1]
  while queue:
    x, y = queue.popleft()
    for i in range(4):
      nx = x + dx[i]
      ny = y + dy[i]
      if nx < 0 or ny < 0 or nx >= n or ny >= n:
        continue
      if heights[nx][ny] > rainHeight and visited[nx][ny] == 0:
        visited[nx][ny] = 1
        queue.append([nx, ny])

  result += 1

for rainHeight in rainHeights:
  result = 0
  visited = [[0] * n for _ in range(n)]
  for i in range(n):
    for j in range(n):
      if heights[i][j] <= rainHeight:
        continue
      if heights[i][j] > rainHeight and visited[i][j] == 0:
        bfs(i, j, rainHeight)

  resultList.append(result)

print(max(resultList))

#강수량은 0부터 시작해야 오류가 나지 않는다
